@component-name = "portal-lima"
definition {
    property testray.main.component.name = "Blogs";
    setUp {
        task ("Opening the portal and doing the Login") {
            TestCase.setUpPortalInstance();
            User.firstLoginPG();
        }
        task ("Creating a Page with a Blog widget") {
            JSONLayout.addPublicLayout(
                groupName = "Guest",
                layoutName = "Blogs Page");
            JSONLayout.addWidgetToPublicLayout(
                column = "1",
                groupName = "Guest",
                layoutName = "Blogs Page",
                widgetName = "Blogs");
        }
        task ("Entering The Blogs Page and Adding a Blog Entry") {
            Navigator.gotoPage(pageName = "Blogs Page");
            JSONBlog.addEntry(
                entryContent = "Blog Entry Content1.",
                entryTitle = "Test Blog1");
        }
    }
    tearDown {
        var testPortalInstance = PropsUtil.get("test.portal.instance");
        if ("${testPortalInstance}" == "true") {
            PortalInstances.tearDownCP();
        }
        else {
            BlogsEntry.tearDownCP();
            Blogs.tearDownConfigurationDisplaySettingsPG(
                pageName = "Blogs Page",
                portletName = "Blogs");
            JSONLayout.deletePublicLayout(
                groupName = "Guest",
                layoutName = "Blogs Page");
        }
        User.logoutPG();
    }
    @description = "Can Create a Blog"
    @priority = "5"
    test CanCreateBlog {
        task ("this is where the tester will add code to assert the Success message and that the entry has all the details that were added") {
            Blogs.addEntry(
                entryContent = "Blog Entry Content2.",
                entryTitle = "Test Blog2");
            BlogsEntry.viewPG(
                entryContent = "Blog Entry Content2.",
                entryTitle = "Test Blog2");
        }
    }
    @description = "Can Delete a Blog"
    @priority = "5"
    test CanDeleteBlog {
        task("Add Entry"){
            Blogs.addEntry(
                entryContent = "Blog Entry Content2.",
                entryTitle = "Test Blog2");
        }
        task("Delete one of the Entries Present"){
            BlogsEntry.moveToRecycleBinPG(
                entryContent = "Blog Entry Content2.",
                entryTitle = "Test Blog2");
        }
        task("Assert that the Entry got deleted"){
            BlogsEntry.viewNoPG(
                entryContent = "Blog Entry Content2.",
                entryTitle = "Test Blog2");
        }
    }
    @description = "Can Edit a Blog"
    @priority = "5"
    test CanEditBlog {
         task("the User edits the blog Entry"){
            BlogsNavigator.gotoEditPG(entryTitle = "Test Blog1");
            BlogsEntry.editEntryContent(
                entryContent = "Blog Entry Content1.",
                entryContentEdit = "Blogs Entry Content Edit",
                entrySubtitle = "",
                entrySubtitleEdit = "Blogs Entry Subtitle Edit",
                entryTitle = "Test Blog1",
                entryTitleEdit = "Blogs Entry Title Edit");
            PortletEntry.publish();
            BlogsEntry.viewPG(
                entryContent = "Blogs Entry Content Edit",
                entryTitle = "Blogs Entry Title Edit");
        }
    }
    @description = "Can Search Blogs"
    @priority = "5"
    test CanSearchBlogs {
    }
}